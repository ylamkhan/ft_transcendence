# Generated by Django 5.0.6 on 2024-12-10 01:53

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='anonyme-player2', max_length=150, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('avatar', models.FileField(blank=True, max_length=500, null=True, upload_to='')),
                ('player_side', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='RemotePlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='anonyme-remoteplayer', max_length=150, unique=True)),
                ('nickname', models.CharField(blank=True, max_length=150, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('avatar', models.FileField(blank=True, max_length=500, null=True, upload_to='')),
                ('is_active', models.BooleanField(default=False)),
                ('tourn_name', models.CharField(max_length=150)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.FileField(blank=True, max_length=500, null=True, upload_to=accounts.models.GenerateProfileImagePath)),
                ('reset_password_pin', models.CharField(blank=True, max_length=6, null=True)),
                ('status', models.CharField(default='Offline', max_length=20)),
                ('is_online', models.BooleanField(default=False)),
                ('nickname', models.CharField(blank=True, max_length=150, null=True)),
                ('country_select', django_countries.fields.CountryField(default='PS', max_length=2)),
                ('date_of_birth', models.DateField(blank=True, default=None, null=True)),
                ('about', models.TextField(blank=True, max_length=150, null=True)),
                ('level', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('level_progress', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('xp', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('win', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('draw', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('lose', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('total_match', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('daily_winning_rates', models.JSONField(blank=True, default=list)),
                ('tfa_enabled', models.BooleanField(default=False)),
                ('otp_code', models.PositiveIntegerField(blank=True, default=123456, null=True)),
                ('first_match_won', models.BooleanField(default=False)),
                ('xp_periodic', models.IntegerField(default=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date_awarded', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='BlockedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocked', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_by_users', to=settings.AUTH_USER_MODEL)),
                ('blocker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blocked_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_of', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('message', 'Message'), ('friend_request', 'Friend Request'), ('match_invitation', 'Match Invitation'), ('tournament_invitation', 'Tournament Invitation')], max_length=255)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('request_id', models.IntegerField(null=True, unique=True)),
                ('message_id', models.IntegerField(null=True, unique=True)),
                ('game_id', models.IntegerField(null=True)),
                ('is_treated', models.BooleanField(default=False)),
                ('tournament_name', models.CharField(blank=True, max_length=255, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_notifications', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OneToOneHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_type', models.CharField(blank=True, max_length=50, null=True)),
                ('player1', models.CharField(blank=True, max_length=50, null=True)),
                ('player2', models.CharField(blank=True, max_length=50, null=True)),
                ('player1_avatar', models.FileField(blank=True, max_length=500, null=True, upload_to='')),
                ('player2_avatar', models.FileField(blank=True, max_length=500, null=True, upload_to='')),
                ('score1', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('score2', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10)])),
                ('winner', models.CharField(blank=True, max_length=50, null=True)),
                ('loser', models.CharField(blank=True, max_length=50, null=True)),
                ('date_played', models.DateTimeField(auto_now_add=True)),
                ('room_name', models.CharField(max_length=255)),
            ],
            options={
                'unique_together': {('player1', 'player2', 'room_name')},
            },
        ),
        migrations.CreateModel(
            name='MatchmakingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.player')),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=255, unique=True)),
                ('player1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player1_games', to='accounts.player')),
                ('player2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player2_games', to='accounts.player')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groupName', models.CharField(max_length=50, unique=True)),
                ('Friendship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.friend')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=1000)),
                ('timestamp', models.DateTimeField()),
                ('read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receives_message', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sends_message', to=settings.AUTH_USER_MODEL)),
                ('chatGroup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.privatechat')),
            ],
        ),
        migrations.CreateModel(
            name='MatchmakingQueue3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.remoteplayer')),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom3',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=255, unique=True)),
                ('player1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player1_games', to='accounts.remoteplayer')),
                ('player2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player2_games', to='accounts.remoteplayer')),
            ],
        ),
        migrations.CreateModel(
            name='RemoteTournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='anonyme-remotetournament', max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started', models.BooleanField(default=False)),
                ('finished', models.BooleanField(default=False)),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_tournaments', to='accounts.remoteplayer')),
            ],
        ),
        migrations.CreateModel(
            name='RemoteRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('is_complete', models.BooleanField(default=False)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='accounts.remotetournament')),
            ],
        ),
        migrations.AddField(
            model_name='remoteplayer',
            name='current_tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.remotetournament'),
        ),
        migrations.CreateModel(
            name='RemoteParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='accounts.remoteplayer')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='accounts.remotetournament')),
            ],
        ),
        migrations.CreateModel(
            name='RemoteMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('played', models.BooleanField(default=False)),
                ('match_date', models.DateTimeField(blank=True, null=True)),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_player1', to='accounts.remoteplayer')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_player2', to='accounts.remoteplayer')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_matches', to='accounts.remoteplayer')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='accounts.remotetournament')),
            ],
        ),
        migrations.CreateModel(
            name='TournamentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(max_length=150)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='histories', to='accounts.remotetournament')),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('sender', 'receiver')},
            },
        ),
    ]
